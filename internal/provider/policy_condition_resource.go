package provider

import (
	"context"
	"fmt"
	"github.com/google/uuid"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource                = &policyConditionResource{}
	_ resource.ResourceWithConfigure   = &policyConditionResource{}
	_ resource.ResourceWithImportState = &policyConditionResource{}
)

func NewPolicyConditionResource() resource.Resource {
	return &policyConditionResource{}
}

type policyConditionResource struct {
	client *dtrack.Client
	semver *Semver
}

type policyConditionResourceModel struct {
	ID       types.String `tfsdk:"id"`
	PolicyID types.String `tfsdk:"policy"`
	Subject  types.String `tfsdk:"subject"`
	Operator types.String `tfsdk:"operator"`
	Value    types.String `tfsdk:"value"`
}

func (r *policyConditionResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_policy_condition"
}

func (r *policyConditionResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a Policy Condition.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the Policy Condition as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"policy": schema.StringAttribute{
				Description: "UUID for the Policy, to which to add the condition.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subject": schema.StringAttribute{
				Description: "Subject of the Policy Condition. See DependencyTrack for allowed values.",
				Required:    true,
			},
			"operator": schema.StringAttribute{
				Description: "Operator for the Policy Condition. See DependencyTrack for allowed values.",
				Required:    true,
			},
			"value": schema.StringAttribute{
				Description: "Value against which to compare Subject.",
				Required:    true,
			},
		},
	}
}

func (r *policyConditionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan policyConditionResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	policyID, err := uuid.Parse(plan.PolicyID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("policy"),
			"Within Create, unable to parse policy into UUID",
			"Error from: "+err.Error(),
		)
		return
	}

	conditionReq := dtrack.PolicyCondition{
		Operator: dtrack.PolicyConditionOperator(plan.Operator.ValueString()),
		Subject:  dtrack.PolicyConditionSubject(plan.Subject.ValueString()),
		Value:    plan.Value.ValueString(),
	}

	tflog.Debug(ctx, "Creating a new policy condition within policy: "+policyID.String())
	conditionRes, err := r.client.PolicyCondition.Create(ctx, policyID, conditionReq)

	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating policy",
			"Error from: "+err.Error(),
		)
		return
	}

	plan = policyConditionResourceModel{
		ID:       types.StringValue(conditionRes.UUID.String()),
		PolicyID: types.StringValue(policyID.String()),
		Subject:  types.StringValue(string(conditionRes.Subject)),
		Operator: types.StringValue(string(conditionRes.Operator)),
		Value:    types.StringValue(conditionRes.Value),
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, "Created a new policy condition, with id: "+conditionRes.UUID.String())
}

func (r *policyConditionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state
	var state policyConditionResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Refresh
	tflog.Debug(ctx, "Refreshing condition with id: "+state.ID.ValueString())
	id, err := uuid.Parse(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Read, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	condition, err := FindPagedPolicyCondition(id, func(po dtrack.PageOptions) (dtrack.Page[dtrack.Policy], error) {
		return r.client.Policy.GetAll(ctx, po)
	})
	if err != nil {
		resp.Diagnostics.AddError(
			"Withhin Read, unable to identify policy condition",
			"Error from: "+err.Error(),
		)
		return
	}

	state = policyConditionResourceModel{
		ID:       types.StringValue(condition.UUID.String()),
		PolicyID: types.StringValue(condition.Policy.UUID.String()),
		Subject:  types.StringValue(string(condition.Subject)),
		Operator: types.StringValue(string(condition.Operator)),
		Value:    types.StringValue(condition.Value),
	}

	// Update state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Refreshed policy condition with id: "+state.ID.ValueString())
}

func (r *policyConditionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get State
	var plan policyConditionResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, err := uuid.Parse(plan.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Update, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	policyId, err := uuid.Parse(plan.PolicyID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("policy"),
			"Within Update, unable to parse policy into UUID",
			"Error from: "+err.Error(),
		)
		return
	}

	conditionReq := dtrack.PolicyCondition{
		UUID:     id,
		Operator: dtrack.PolicyConditionOperator(plan.Operator.ValueString()),
		Subject:  dtrack.PolicyConditionSubject(plan.Subject.ValueString()),
		Value:    plan.Value.ValueString(),
	}

	// Execute
	tflog.Debug(ctx, "Updating policy condition with id: "+id.String())
	conditionRes, err := r.client.PolicyCondition.Update(ctx, conditionReq)

	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to update policy condition",
			"Error in: "+id.String()+", from: "+err.Error(),
		)
		return
	}

	// Map SDK to TF

	plan = policyConditionResourceModel{
		ID:       types.StringValue(conditionRes.UUID.String()),
		PolicyID: types.StringValue(policyId.String()),
		Subject:  types.StringValue(string(conditionRes.Subject)),
		Operator: types.StringValue(string(conditionRes.Operator)),
		Value:    types.StringValue(conditionRes.Value),
	}

	// Update State
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, "Updated policy condition with id: "+id.String())
}

func (r *policyConditionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state
	var state policyConditionResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, err := uuid.Parse(state.ID.ValueString())

	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Delete, unable to parse UUID",
			"Error parsing UUID from: "+state.ID.ValueString()+", error: "+err.Error(),
		)
		return
	}

	// Execute
	tflog.Debug(ctx, "Deleting policy condition with id: "+id.String())
	err = r.client.PolicyCondition.Delete(ctx, id)

	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete policy condition",
			"Unexpected error when trying to delete policy condition: "+id.String()+", error: "+err.Error(),
		)
		return
	}

	tflog.Debug(ctx, "Deleted policy condition with id: "+id.String())
}

func (r *policyConditionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}

func (r *policyConditionResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	clientInfo, ok := req.ProviderData.(clientInfo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected provider.clientInfo, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = clientInfo.client
	r.semver = clientInfo.semver
}
