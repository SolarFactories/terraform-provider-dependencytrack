package provider

import (
	"context"
	"fmt"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource                = &repositoryResource{}
	_ resource.ResourceWithConfigure   = &repositoryResource{}
	_ resource.ResourceWithImportState = &repositoryResource{}
)

func NewRepositoryResource() resource.Resource {
	return &repositoryResource{}
}

type repositoryResource struct {
	client *dtrack.Client
	semver *Semver
}

type repositoryResourceModel struct {
	ID         types.String `tfsdk:"id"`
	Type       types.String `tfsdk:"type"`
	Identifier types.String `tfsdk:"identifier"`
	URL        types.String `tfsdk:"url"`
	Precedence types.Int32  `tfsdk:"precedence"`
	Enabled    types.Bool   `tfsdk:"enabled"`
	Internal   types.Bool   `tfsdk:"internal"`
	Username   types.String `tfsdk:"username"`
	Password   types.String `tfsdk:"password"`
}

func (r *repositoryResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_repository"
}

func (r *repositoryResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a Repository.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the Repository as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"type": schema.StringAttribute{
				Description: "Type of the Repository. See DependencyTrack for valid enum values.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"identifier": schema.StringAttribute{
				Description: "Identifier of the Repository.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"url": schema.StringAttribute{
				Description: "URL of the Repository.",
				Required:    true,
			},
			"precedence": schema.Int32Attribute{
				Description: "Precedence / Resolution Order of the Repository.",
				Optional:    true,
				Computed:    true,
			},
			"enabled": schema.BoolAttribute{
				Description: "Whether the Repository Enabled.",
				Required:    true,
			},
			"internal": schema.BoolAttribute{
				Description: "Whether the Repository is Internal.",
				Required:    true,
			},
			"username": schema.StringAttribute{
				Description: "Username to use for Authentication to Repository.",
				Required:    true,
			},
			"password": schema.StringAttribute{
				Description: "Password to use for Authentication to Repository.",
				Required:    true,
				Sensitive:   true,
			},
		},
	}
}

func (r *repositoryResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan repositoryResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	repositoryReq := dtrack.Repository{
		Type:                   dtrack.RepositoryType(plan.Type.ValueString()),
		Identifier:             plan.Identifier.ValueString(),
		Url:                    plan.URL.ValueString(),
		ResolutionOrder:        int(plan.Precedence.ValueInt32()),
		Enabled:                plan.Enabled.ValueBool(),
		Internal:               plan.Internal.ValueBool(),
		Username:               plan.Username.ValueString(),
		Password:               plan.Password.ValueString(),
		AuthenticationRequired: plan.Password.ValueString() != "" || plan.Username.ValueString() != "",
	}

	tflog.Debug(ctx, "Creating a Repository", map[string]any{
		"type":       repositoryReq.Type,
		"identifier": repositoryReq.Identifier,
		"url":        repositoryReq.Url,
		"precedence": repositoryReq.ResolutionOrder,
		"enabled":    repositoryReq.Enabled,
		"internal":   repositoryReq.Internal,
		"username":   repositoryReq.Username,
	})
	repositoryRes, err := r.client.Repository.Create(ctx, repositoryReq)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating repository",
			"Could not create repository, unexpected error within Client: "+err.Error(),
		)
		return
	}

	plan = repositoryResourceModel{
		ID:         types.StringValue(repositoryRes.UUID.String()),
		Type:       types.StringValue(string(repositoryRes.Type)),
		Identifier: types.StringValue(repositoryRes.Identifier),
		URL:        types.StringValue(repositoryRes.Url),
		Precedence: types.Int32Value(int32(repositoryRes.ResolutionOrder)),
		Enabled:    types.BoolValue(repositoryRes.Enabled),
		Internal:   types.BoolValue(repositoryRes.Internal),
		Username:   types.StringValue(repositoryRes.Username),
		// API Response does not include Password
		Password: plan.Password,
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Created Repository", map[string]any{
		"id":         plan.ID.ValueString(),
		"type":       plan.Type.ValueString(),
		"identifier": plan.Identifier.ValueString(),
		"url":        plan.URL.ValueString(),
		"precedence": plan.Precedence.ValueInt32(),
		"enabled":    plan.Enabled.ValueBool(),
		"internal":   plan.Internal.ValueBool(),
		"username":   plan.Username.ValueString(),
	})
}

func (r *repositoryResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state
	var state repositoryResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Refresh
	repoType := state.Type.ValueString()

	id, diag := TryParseUUID(state.ID, LifecycleRead, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}
	tflog.Debug(ctx, "Reading Repository", map[string]any{
		"id":   id.String(),
		"type": repoType,
	})

	repository, err := FindPaged(
		func(po dtrack.PageOptions) (dtrack.Page[dtrack.Repository], error) {
			return r.client.Repository.GetByType(ctx, dtrack.RepositoryType(repoType), po)
		},
		func(repo dtrack.Repository) bool {
			return repo.UUID == id
		},
	)

	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get updated repository",
			"Error with reading repository: "+id.String()+", in original error: "+err.Error(),
		)
		return
	}

	state = repositoryResourceModel{
		ID:         types.StringValue(repository.UUID.String()),
		Type:       types.StringValue(string(repository.Type)),
		Identifier: types.StringValue(repository.Identifier),
		URL:        types.StringValue(repository.Url),
		Precedence: types.Int32Value(int32(repository.ResolutionOrder)),
		Enabled:    types.BoolValue(repository.Enabled),
		Internal:   types.BoolValue(repository.Internal),
		Username:   types.StringValue(repository.Username),
		// API Response does not include Password
		Password: state.Password,
	}

	// Update state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Read Repository", map[string]any{
		"id":         state.ID.ValueString(),
		"type":       state.Type.ValueString(),
		"identifier": state.Identifier.ValueString(),
		"url":        state.URL.ValueString(),
		"precedence": state.Precedence.ValueInt32(),
		"enabled":    state.Enabled.ValueBool(),
		"internal":   state.Internal.ValueBool(),
		"username":   state.Username.ValueString(),
	})
}

func (r *repositoryResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get State
	var plan repositoryResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, diag := TryParseUUID(plan.ID, LifecycleUpdate, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}
	repositoryReq := dtrack.Repository{
		UUID:                   id,
		Type:                   dtrack.RepositoryType(plan.Type.ValueString()),
		Identifier:             plan.Identifier.ValueString(),
		Url:                    plan.URL.ValueString(),
		ResolutionOrder:        int(plan.Precedence.ValueInt32()),
		Enabled:                plan.Enabled.ValueBool(),
		Internal:               plan.Internal.ValueBool(),
		Username:               plan.Username.ValueString(),
		Password:               plan.Password.ValueString(),
		AuthenticationRequired: plan.Password.ValueString() != "" || plan.Username.ValueString() != "",
	}

	// Execute
	tflog.Debug(ctx, "Updating Repository", map[string]any{
		"id":         repositoryReq.UUID.String(),
		"type":       string(repositoryReq.Type),
		"identifier": repositoryReq.Identifier,
		"url":        repositoryReq.Url,
		"precedence": repositoryReq.ResolutionOrder,
		"enabled":    repositoryReq.Enabled,
		"internal":   repositoryReq.Internal,
		"username":   repositoryReq.Username,
	})
	repositoryRes, err := r.client.Repository.Update(ctx, repositoryReq)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to update repository",
			"Error in: "+id.String()+", from: "+err.Error(),
		)
		return
	}

	// Map SDK to TF
	plan = repositoryResourceModel{
		ID:         types.StringValue(repositoryRes.UUID.String()),
		Type:       types.StringValue(string(repositoryRes.Type)),
		Identifier: types.StringValue(repositoryRes.Identifier),
		URL:        types.StringValue(repositoryRes.Url),
		Precedence: types.Int32Value(int32(repositoryRes.ResolutionOrder)),
		Enabled:    types.BoolValue(repositoryRes.Enabled),
		Internal:   types.BoolValue(repositoryRes.Internal),
		Username:   types.StringValue(repositoryRes.Username),
		// API Response does not include Password
		Password: plan.Password,
	}

	// Update State
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Updated Repository", map[string]any{
		"id":         plan.ID.ValueString(),
		"type":       plan.Type.ValueString(),
		"identifier": plan.Identifier.ValueString(),
		"url":        plan.URL.ValueString(),
		"precedence": plan.Precedence.ValueInt32(),
		"enabled":    plan.Enabled.ValueBool(),
		"internal":   plan.Internal.ValueBool(),
		"username":   plan.Username.ValueString(),
	})
}

func (r *repositoryResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state
	var state repositoryResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, diag := TryParseUUID(state.ID, LifecycleDelete, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}

	// Execute
	tflog.Debug(ctx, "Deleting Repository", map[string]any{
		"id": id.String(),
	})
	err := r.client.Repository.Delete(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete repository",
			"Unexpected error when trying to delete repository: "+id.String()+", error: "+err.Error(),
		)
		return
	}
	tflog.Debug(ctx, "Deleted Repository", map[string]any{
		"id":         state.ID.ValueString(),
		"type":       state.Type.ValueString(),
		"identifier": state.Identifier.ValueString(),
		"url":        state.URL.ValueString(),
		"precedence": state.Precedence.ValueInt32(),
		"enabled":    state.Enabled.ValueBool(),
		"internal":   state.Internal.ValueBool(),
		"username":   state.Username.ValueString(),
	})
}

func (r *repositoryResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Importing Repository", map[string]any{
		"id": req.ID,
	})
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Imported Repository", map[string]any{
		"id": req.ID,
	})
}

func (r *repositoryResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	clientInfo, ok := req.ProviderData.(clientInfo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected provider.clientInfo, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = clientInfo.client
	r.semver = clientInfo.semver
}
