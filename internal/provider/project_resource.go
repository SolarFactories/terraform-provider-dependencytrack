package provider

import (
	"context"
	"fmt"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource                = &projectResource{}
	_ resource.ResourceWithConfigure   = &projectResource{}
	_ resource.ResourceWithImportState = &projectResource{}
)

type (
	projectResource struct {
		client *dtrack.Client
		semver *Semver
	}

	projectResourceModel struct {
		Collection  *projectResourceModelCollection `tfsdk:"collection"`
		ID          types.String                    `tfsdk:"id"`
		Name        types.String                    `tfsdk:"name"`
		Description types.String                    `tfsdk:"description"`
		Version     types.String                    `tfsdk:"version"`
		Parent      types.String                    `tfsdk:"parent"`
		Classifier  types.String                    `tfsdk:"classifier"`
		Group       types.String                    `tfsdk:"group"`
		PURL        types.String                    `tfsdk:"purl"`
		CPE         types.String                    `tfsdk:"cpe"`
		SWID        types.String                    `tfsdk:"swid"`
		Tags        types.List                      `tfsdk:"tags"`
		Active      types.Bool                      `tfsdk:"active"`
	}

	projectResourceModelCollection struct {
		Logic types.String `tfsdk:"logic"`
		Tag   types.String `tfsdk:"tag"`
	}
)

func NewProjectResource() resource.Resource {
	return &projectResource{}
}

func (*projectResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_project"
}

func (*projectResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a Project.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the Project as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Description: "Name of the Project.",
				Required:    true,
			},
			"description": schema.StringAttribute{
				Description: "Description of the Project.",
				Optional:    true,
				Computed:    true,
			},
			"active": schema.BoolAttribute{
				Description: "Whether the Project is active. Defaults to true.",
				Optional:    true,
				Computed:    true,
			},
			"version": schema.StringAttribute{
				Description: "Version of the project.",
				Optional:    true,
				Computed:    true,
			},
			"parent": schema.StringAttribute{
				Description: "UUID of a parent project, to allow for nesting. Available in API 4.7+.",
				Optional:    true,
			},
			"classifier": schema.StringAttribute{
				Description: "Classifier of the Project. Defaults to APPLICATION. See DependencyTrack for valid options.",
				Optional:    true,
				Computed:    true,
			},
			"group": schema.StringAttribute{
				Description: "Namespace / group / vendor of the Project.",
				Optional:    true,
				Computed:    true,
			},
			"purl": schema.StringAttribute{
				Description: "Package URL of the Project. MUST be in standardised format to be saved. See DependencyTrack for format.",
				Optional:    true,
				Computed:    true,
			},
			"cpe": schema.StringAttribute{
				Description: "Common Platform Enumeration of the Project. Standardised format v2.2 / v2.3 from MITRE / NIST.",
				Optional:    true,
				Computed:    true,
			},
			"swid": schema.StringAttribute{
				Description: "SWID Tag ID. ISO/IEC 19770-2:2015.",
				Optional:    true,
				Computed:    true,
			},
			"tags": schema.ListAttribute{
				Description: "Tags to assign to a project. " +
					"If unset, retains existing tags on project. " +
					"If set, and `dependencytrack_tag_projects` is used with any of the tags, it must include this project's `id`.",
				Optional:    true,
				Computed:    true,
				ElementType: types.StringType,
			},
			"collection": schema.SingleNestedAttribute{
				Description: "Project Collection Logic for Aggregate Projects. Available in API 4.12+.",
				Optional:    true,
				//				Computed:    true,
				Attributes: map[string]schema.Attribute{
					"logic": schema.StringAttribute{
						Description: "Logic used to collecting sub-projects. See DependencyTrack for valid values.",
						Optional:    true,
						Computed:    true,
					},
					"tag": schema.StringAttribute{
						Description: "Tag used for selecting which projects to collect, when 'logic' is 'AGGREGATE_DIRECT_CHILDREN_WITH_TAG'.",
						Optional:    true,
					},
				},
			},
		},
	}
}

func (r *projectResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan projectResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	projectReq := dtrack.Project{
		Name:        plan.Name.ValueString(),
		Description: plan.Description.ValueString(),
		Active:      plan.Active.ValueBool(),
		Version:     plan.Version.ValueString(),
		ParentRef:   nil, // Set Below.
		Classifier:  plan.Classifier.ValueString(),
		Group:       plan.Group.ValueString(),
		PURL:        plan.PURL.ValueString(),
		CPE:         plan.CPE.ValueString(),
		SWIDTagID:   plan.SWID.ValueString(),
		Tags:        []dtrack.Tag{}, // Set Below.
	}
	if !plan.Parent.IsNull() {
		parentID, diag := TryParseUUID(plan.Parent, LifecycleCreate, path.Root("parent"))
		if diag != nil {
			resp.Diagnostics.Append(diag)
			return
		}
		projectReq.ParentRef = &dtrack.ParentRef{
			UUID: parentID,
		}
	}
	if !plan.Tags.IsUnknown() && !plan.Tags.IsNull() {
		strings, err := GetStringList(ctx, &resp.Diagnostics, plan.Tags)
		if resp.Diagnostics.HasError() {
			return
		}
		if err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("tags"),
				"Within Create, unable to convert `tags` list into slice of string, in project: "+projectReq.Name,
				"Error from: "+err.Error(),
			)
			return
		}
		projectReq.Tags = Map(strings, func(item string) dtrack.Tag { return dtrack.Tag{Name: item} })
	}
	if plan.Active.IsUnknown() {
		projectReq.Active = true
	}
	if plan.Classifier.IsUnknown() {
		projectReq.Classifier = "APPLICATION"
	}
	if plan.Collection != nil {
		projectReq.CollectionLogic = dtrack.CollectionLogic(plan.Collection.Logic.ValueString())
		projectReq.CollectionTag = plan.Collection.Tag.ValueString()
	}

	tflog.Debug(ctx, "Creating a Project", map[string]any{
		"name":             projectReq.Name,
		"description":      projectReq.Description,
		"active":           projectReq.Active,
		"version":          projectReq.Version,
		"parent":           projectReq.ParentRef,
		"classifier":       projectReq.Classifier,
		"group":            projectReq.Group,
		"purl":             projectReq.PURL,
		"cpe":              projectReq.CPE,
		"swid":             projectReq.SWIDTagID,
		"tags":             projectReq.Tags,
		"collection.logic": projectReq.CollectionLogic,
		"collection.tag":   projectReq.CollectionTag,
	})
	projectRes, err := r.client.Project.Create(ctx, projectReq)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating Project",
			"Error from: "+err.Error(),
		)
		return
	}
	tagValueList := Map(projectRes.Tags, func(tag dtrack.Tag) attr.Value {
		return types.StringValue(tag.Name)
	})
	tagList, diags := types.ListValue(types.StringType, tagValueList)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	plan = projectResourceModel{
		ID:          types.StringValue(projectRes.UUID.String()),
		Name:        types.StringValue(projectRes.Name),
		Description: types.StringValue(projectRes.Description),
		Active:      types.BoolValue(projectRes.Active),
		Version:     types.StringValue(projectRes.Version),
		Parent:      types.StringNull(), // Updated below.
		Classifier:  types.StringValue(projectRes.Classifier),
		Group:       types.StringValue(projectRes.Group),
		PURL:        types.StringValue(projectRes.PURL),
		CPE:         types.StringValue(projectRes.CPE),
		SWID:        types.StringValue(projectRes.SWIDTagID),
		Tags:        tagList,
		Collection:  nil, // Updated below.
	}
	if projectRes.ParentRef != nil {
		plan.Parent = types.StringValue(projectRes.ParentRef.UUID.String())
	} else if projectReq.ParentRef != nil && r.semver.Major == 4 && r.semver.Minor < 12 {
		// Creates a project with the Parent, but does not return Parent within Create Endpoint.
		// The parent being set is validated by the Read method, in combination with tests.
		plan.Parent = types.StringValue(projectReq.ParentRef.UUID.String())
	} else {
		plan.Parent = types.StringNull()
	}
	if projectRes.CollectionLogic == "NONE" {
		plan.Collection = nil
	} else {
		plan.Collection = &projectResourceModelCollection{
			Logic: types.StringValue(string(projectRes.CollectionLogic)),
			Tag:   types.StringValue(projectRes.CollectionTag),
		}
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Created a Project", map[string]any{
		"id":               projectRes.UUID.String(),
		"name":             projectRes.Name,
		"description":      projectRes.Description,
		"active":           projectRes.Active,
		"version":          projectRes.Version,
		"parent":           projectRes.ParentRef,
		"classifier":       projectRes.Classifier,
		"group":            projectRes.Group,
		"purl":             projectRes.PURL,
		"cpe":              projectRes.CPE,
		"swid":             projectRes.SWIDTagID,
		"tags":             projectRes.Tags,
		"collection.logic": projectRes.CollectionLogic,
		"collection.tag":   projectRes.CollectionTag,
	})
}

func (r *projectResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state.
	var state projectResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Refresh.
	id, diag := TryParseUUID(state.ID, LifecycleRead, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}
	tflog.Debug(ctx, "Reading Project", map[string]any{
		"id":          id.String(),
		"name":        state.Name.ValueString(),
		"description": state.Description.ValueString(),
		"active":      state.Active.ValueBool(),
		"version":     state.Version.ValueString(),
		"parent":      state.Parent.ValueString(),
		"classifier":  state.Classifier.ValueString(),
		"group":       state.Group.ValueString(),
		"purl":        state.PURL.ValueString(),
		"cpe":         state.CPE.ValueString(),
		"swid":        state.SWID.ValueString(),
		"tags":        state.Tags.Elements(),
	})
	project, err := r.client.Project.Get(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get updated project",
			"Error with reading project: "+id.String()+", in original error: "+err.Error(),
		)
		return
	}

	tagValueList := Map(project.Tags, func(tag dtrack.Tag) attr.Value {
		return types.StringValue(tag.Name)
	})
	tagList, diags := types.ListValue(types.StringType, tagValueList)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	state = projectResourceModel{
		ID:          types.StringValue(project.UUID.String()),
		Name:        types.StringValue(project.Name),
		Description: types.StringValue(project.Description),
		Active:      types.BoolValue(project.Active),
		Version:     types.StringValue(project.Version),
		Parent:      types.StringNull(), // Updated below.
		Classifier:  types.StringValue(project.Classifier),
		Group:       types.StringValue(project.Group),
		PURL:        types.StringValue(project.PURL),
		CPE:         types.StringValue(project.CPE),
		SWID:        types.StringValue(project.SWIDTagID),
		Tags:        tagList,
		Collection:  nil, // Updated below.
		/*Collection: &projectResourceModelCollection{
			Logic: types.StringValue(string(project.CollectionLogic)),
			Tag:   types.StringValue(project.CollectionTag),
		},*/
	}
	if project.ParentRef != nil {
		state.Parent = types.StringValue(project.ParentRef.UUID.String())
	} else {
		state.Parent = types.StringNull()
	}
	if project.CollectionLogic == "NONE" {
		state.Collection = nil
	} else {
		state.Collection = &projectResourceModelCollection{
			Logic: types.StringValue(string(project.CollectionLogic)),
			Tag:   types.StringValue(project.CollectionTag),
		}
	}

	// Update state.
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Read Project", map[string]any{
		"id":               project.UUID.String(),
		"name":             project.Name,
		"description":      project.Description,
		"active":           project.Active,
		"version":          project.Version,
		"parent":           project.ParentRef,
		"classifier":       project.Classifier,
		"group":            project.Group,
		"purl":             project.PURL,
		"cpe":              project.CPE,
		"swid":             project.SWIDTagID,
		"tags":             project.Tags,
		"collection.logic": project.CollectionLogic,
		"collection.tag":   project.CollectionTag,
	})
}

func (r *projectResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get State.
	var plan projectResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK.
	id, diag := TryParseUUID(plan.ID, LifecycleUpdate, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}
	tflog.Debug(ctx, "Within Update, Fetching current Project information", map[string]any{
		"id": id.String(),
	})
	project, err := r.client.Project.Get(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Within Update, unable to retrieve current Project",
			"Error from: "+err.Error(),
		)
		return
	}

	project.Name = plan.Name.ValueString()
	project.Description = plan.Description.ValueString()
	project.Active = plan.Active.ValueBool()
	project.Version = plan.Version.ValueString()
	project.Classifier = plan.Classifier.ValueString()
	project.Group = plan.Group.ValueString()
	project.PURL = plan.PURL.ValueString()
	project.CPE = plan.CPE.ValueString()
	project.SWIDTagID = plan.SWID.ValueString()

	if plan.Active.IsUnknown() {
		project.Active = true
	}
	if plan.Classifier.IsUnknown() {
		project.Classifier = "APPLICATION"
	}
	if !plan.Parent.IsNull() {
		parentID, diag := TryParseUUID(plan.Parent, LifecycleUpdate, path.Root("parent"))
		if diag != nil {
			resp.Diagnostics.Append(diag)
			return
		}
		project.ParentRef = &dtrack.ParentRef{
			UUID: parentID,
		}
	} else {
		project.ParentRef = nil
	}
	if !plan.Tags.IsUnknown() && !plan.Tags.IsNull() {
		var stringList []string
		stringList, err = GetStringList(ctx, &resp.Diagnostics, plan.Tags)
		if resp.Diagnostics.HasError() {
			return
		}
		if err != nil {
			resp.Diagnostics.AddAttributeError(
				path.Root("tags"),
				"Within Create, unable to convert `tags` list into slice of string, in project: "+project.UUID.String(),
				"Error from: "+err.Error(),
			)
			return
		}
		project.Tags = Map(stringList, func(item string) dtrack.Tag { return dtrack.Tag{Name: item} })
	}
	if plan.Collection != nil {
		project.CollectionLogic = dtrack.CollectionLogic(plan.Collection.Logic.ValueString())
		project.CollectionTag = plan.Collection.Tag.ValueString()
	}

	// Execute.
	tflog.Debug(ctx, "Updating Project", map[string]any{
		"id":               project.UUID.String(),
		"name":             project.Name,
		"description":      project.Description,
		"active":           project.Active,
		"version":          project.Version,
		"parent":           project.ParentRef,
		"classifier":       project.Classifier,
		"group":            project.Group,
		"purl":             project.PURL,
		"cpe":              project.CPE,
		"swid":             project.SWIDTagID,
		"tags":             project.Tags,
		"collection.logic": project.CollectionLogic,
		"collection.tag":   project.CollectionTag,
	})
	projectRes, err := r.client.Project.Update(ctx, project)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to update project",
			"Error in: "+id.String()+", from: "+err.Error(),
		)
		return
	}

	tagValueList := Map(project.Tags, func(tag dtrack.Tag) attr.Value {
		return types.StringValue(tag.Name)
	})
	tagList, diags := types.ListValue(types.StringType, tagValueList)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map SDK to TF.
	plan = projectResourceModel{
		ID:          types.StringValue(projectRes.UUID.String()),
		Name:        types.StringValue(projectRes.Name),
		Description: types.StringValue(projectRes.Description),
		Active:      types.BoolValue(projectRes.Active),
		Version:     types.StringValue(projectRes.Version),
		Parent:      types.StringNull(), // Updated below.
		Classifier:  types.StringValue(projectRes.Classifier),
		Group:       types.StringValue(projectRes.Group),
		PURL:        types.StringValue(projectRes.PURL),
		CPE:         types.StringValue(projectRes.CPE),
		SWID:        types.StringValue(projectRes.SWIDTagID),
		Tags:        tagList,
		Collection:  nil, // Updated below.
	}
	if projectRes.ParentRef != nil {
		plan.Parent = types.StringValue(projectRes.ParentRef.UUID.String())
	} else {
		plan.Parent = types.StringNull()
	}
	if projectRes.CollectionLogic == "NONE" {
		plan.Collection = nil
	} else {
		plan.Collection = &projectResourceModelCollection{
			Logic: types.StringValue(string(projectRes.CollectionLogic)),
			Tag:   types.StringValue(projectRes.CollectionTag),
		}
	}

	// Update State.
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Updated Project", map[string]any{
		"id":               projectRes.UUID.String(),
		"name":             projectRes.Name,
		"description":      projectRes.Description,
		"active":           projectRes.Active,
		"version":          projectRes.Version,
		"parent":           projectRes.ParentRef,
		"classifier":       projectRes.Classifier,
		"group":            projectRes.Group,
		"purl":             projectRes.PURL,
		"cpe":              projectRes.CPE,
		"swid":             projectRes.SWIDTagID,
		"tags":             projectRes.Tags,
		"collection.logic": projectRes.CollectionLogic,
		"collection.tag":   projectRes.CollectionTag,
	})
}

func (r *projectResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state.
	var state projectResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK.
	id, diag := TryParseUUID(state.ID, LifecycleDelete, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}

	// Execute.
	tflog.Debug(ctx, "Deleting Project", map[string]any{
		"id":          id.String(),
		"name":        state.Name.ValueString(),
		"description": state.Description.ValueString(),
		"active":      state.Active.ValueBool(),
		"version":     state.Version.ValueString(),
		"parent":      state.Parent.ValueString(),
		"classifier":  state.Classifier.ValueString(),
		"group":       state.Group.ValueString(),
		"purl":        state.PURL.ValueString(),
		"cpe":         state.CPE.ValueString(),
		"swid":        state.SWID.ValueString(),
		"tags":        state.Tags.Elements(),
	})
	err := r.client.Project.Delete(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete project",
			"Unexpected error when trying to delete project: "+id.String()+", error: "+err.Error(),
		)
		return
	}
	tflog.Debug(ctx, "Deleted Project", map[string]any{
		"id":          state.ID.ValueString(),
		"name":        state.Name.ValueString(),
		"description": state.Description.ValueString(),
		"active":      state.Active.ValueBool(),
		"version":     state.Version.ValueString(),
		"parent":      state.Parent.ValueString(),
		"classifier":  state.Classifier.ValueString(),
		"group":       state.Group.ValueString(),
		"purl":        state.PURL.ValueString(),
		"cpe":         state.CPE.ValueString(),
		"swid":        state.SWID.ValueString(),
		"tags":        state.Tags.Elements(),
	})
}

func (*projectResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	tflog.Debug(ctx, "Importing Project", map[string]any{
		"id": req.ID,
	})
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Imported Project", map[string]any{
		"id": req.ID,
	})
}

func (r *projectResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	clientInfoData, ok := req.ProviderData.(clientInfo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected provider.clientInfo, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = clientInfoData.client
	r.semver = clientInfoData.semver
}
