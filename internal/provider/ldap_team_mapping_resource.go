package provider

import (
	"context"
	"fmt"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource              = &ldapTeamMappingResource{}
	_ resource.ResourceWithConfigure = &ldapTeamMappingResource{}
)

func NewLDAPTeamMappingResource() resource.Resource {
	return &ldapTeamMappingResource{}
}

type (
	ldapTeamMappingResource struct {
		client *dtrack.Client
		semver *Semver
	}

	ldapTeamMappingResourceModel struct {
		ID                types.String `tfsdk:"id"`
		Team              types.String `tfsdk:"team"`
		DistinguishedName types.String `tfsdk:"distinguished_name"`
	}
)

func (r *ldapTeamMappingResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_team_mapping"
}

func (r *ldapTeamMappingResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a mapping from LDAP Distinguished Name to Team.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the Mapping, as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"team": schema.StringAttribute{
				Description: "UUID for the Team to which to map users.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"distinguished_name": schema.StringAttribute{
				Description: "Distinguished Name used for mapping.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (r *ldapTeamMappingResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan ldapTeamMappingResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	team, diag := TryParseUUID(plan.Team, LifecycleCreate, path.Root("team"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}
	distinguishedName := plan.DistinguishedName.ValueString()

	mappingReq := dtrack.MappedLdapGroupRequest{
		Team:              team,
		DistinguishedName: distinguishedName,
	}
	tflog.Debug(ctx, "Creating LDAP Team Mapping", map[string]any{
		"team":               mappingReq.Team.String(),
		"distinguished_name": mappingReq.DistinguishedName,
	})

	mappingRes, err := r.client.LDAP.AddMapping(ctx, mappingReq)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating ldap mapping",
			"Unexpected error: "+err.Error(),
		)
		return
	}

	plan = ldapTeamMappingResourceModel{
		ID:                types.StringValue(mappingRes.UUID.String()),
		DistinguishedName: types.StringValue(mappingRes.DistinguishedName),
		// Response does not include Team UUID.
		Team: types.StringValue(team.String()),
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Created LDAP Team Mapping", map[string]any{
		"id":                 plan.ID.ValueString(),
		"team":               plan.Team.ValueString(),
		"distinguished_name": plan.DistinguishedName.ValueString(),
	})
}

func (r *ldapTeamMappingResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state.
	var state ldapTeamMappingResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Reading LDAP Team Mapping", map[string]any{
		"id":                 state.ID.ValueString(),
		"team":               state.Team.ValueString(),
		"distinguished_name": state.DistinguishedName.ValueString(),
	})

	// Refresh.
	id, diag := TryParseUUID(state.ID, LifecycleRead, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
	}
	team, diag := TryParseUUID(state.Team, LifecycleRead, path.Root("team"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
	}
	distinguishedName := state.DistinguishedName.ValueString()
	if resp.Diagnostics.HasError() {
		return
	}

	mappedGroups, err := r.client.LDAP.GetTeamMappings(ctx, team)
	if err != nil {
		resp.Diagnostics.AddError(
			"Within Read, unable to retrieve team mappings",
			"Error from: "+err.Error(),
		)
		return
	}
	mappingInfo, err := Find(mappedGroups, func(mapping dtrack.MappedLdapGroup) bool {
		return mapping.UUID == id
	})

	if err != nil {
		resp.Diagnostics.AddError(
			"Within Read, unable to locate ldap mapping",
			fmt.Sprintf(
				"Error with finding mapping with id: %s, for team: %s, and distinguished name: %s, in original error: %s",
				id.String(), team.String(), distinguishedName, err.Error(),
			),
		)
		return
	}
	state = ldapTeamMappingResourceModel{
		ID:                types.StringValue(mappingInfo.UUID.String()),
		Team:              types.StringValue(team.String()),
		DistinguishedName: types.StringValue(mappingInfo.DistinguishedName),
	}

	// Update state.
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Read LDAP Team Mapping", map[string]any{
		"id":                 state.ID.ValueString(),
		"team":               state.Team.ValueString(),
		"distinguished_name": state.DistinguishedName.ValueString(),
	})
}

func (r *ldapTeamMappingResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Nothing to Update. This resource only has Create, Delete actions.
	// Get State.
	var plan ldapTeamMappingResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, "Updating LDAP Team Mapping", map[string]any{
		"id":                 plan.ID.ValueString(),
		"team":               plan.Team.ValueString(),
		"distinguished_name": plan.DistinguishedName.ValueString(),
	})

	id, diag := TryParseUUID(plan.ID, LifecycleUpdate, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
	}
	team, diag := TryParseUUID(plan.Team, LifecycleUpdate, path.Root("team"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
	}
	distingushedName := plan.DistinguishedName.ValueString()
	if resp.Diagnostics.HasError() {
		return
	}

	state := ldapTeamMappingResourceModel{
		ID:                types.StringValue(id.String()),
		Team:              types.StringValue(team.String()),
		DistinguishedName: types.StringValue(distingushedName),
	}

	// Update State.
	diags = resp.State.Set(ctx, state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Updated LDAP Team Mapping", map[string]any{
		"id":                 state.ID.ValueString(),
		"team":               state.Team.ValueString(),
		"distinguished_name": state.DistinguishedName.ValueString(),
	})
}

func (r *ldapTeamMappingResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state.
	var state ldapTeamMappingResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK.
	id, diag := TryParseUUID(state.ID, LifecycleDelete, path.Root("id"))
	if diag != nil {
		resp.Diagnostics.Append(diag)
		return
	}

	// Execute.
	tflog.Debug(ctx, "Deleting LDAP Team Mapping", map[string]any{
		"id":                 id.String(),
		"team":               state.Team.ValueString(),
		"distinguished_name": state.DistinguishedName.ValueString(),
	})
	err := r.client.LDAP.RemoveMapping(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete ldap mapping",
			"Unexpected error when trying to delete ldap mapping with id: "+id.String()+", error: "+err.Error(),
		)
		return
	}
	tflog.Debug(ctx, "Deleted LDAP Team Mapping", map[string]any{
		"id":                 state.ID.ValueString(),
		"team":               state.Team.ValueString(),
		"distinguished_name": state.DistinguishedName.ValueString(),
	})
}

func (r *ldapTeamMappingResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	clientInfoData, ok := req.ProviderData.(clientInfo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected provider.clientInfo, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = clientInfoData.client
	r.semver = clientInfoData.semver
}
