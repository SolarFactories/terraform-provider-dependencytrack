package provider

import (
	"context"
	"fmt"
	"github.com/google/uuid"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource                = &oidcGroupResource{}
	_ resource.ResourceWithConfigure   = &oidcGroupResource{}
	_ resource.ResourceWithImportState = &oidcGroupResource{}
)

func NewOidcGroupResource() resource.Resource {
	return &oidcGroupResource{}
}

type oidcGroupResource struct {
	client *dtrack.Client
}

type oidcGroupResourceModel struct {
	ID   types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
}

func (r *oidcGroupResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oidc_group"
}

func (r *oidcGroupResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a OIDC Group.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the OIDC Group as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Description: "Name of the OIDC Group.",
				Required:    true,
			},
		},
	}
}

func (r *oidcGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan oidcGroupResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	groupName := plan.Name.ValueString()
	tflog.Debug(ctx, "Creating a new oidc group, with name: "+groupName)
	oidcGroupRes, err := r.client.OIDC.CreateGroup(ctx, groupName)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating oidc group",
			"Could not create oidc group, unexpected error within Client: "+err.Error(),
		)
		return
	}
	plan = oidcGroupResourceModel{
		ID:   types.StringValue(oidcGroupRes.UUID.String()),
		Name: types.StringValue(oidcGroupRes.Name),
	}
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Created a new oidc group, with id: "+oidcGroupRes.UUID.String())
}

func (r *oidcGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state
	var state oidcGroupResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Refresh
	tflog.Debug(ctx, "Refreshing oidc group with id: "+state.ID.ValueString())
	id, err := uuid.Parse(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Read, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	oidcGroup, err := FindPaged(
		func(po dtrack.PageOptions) (dtrack.Page[dtrack.OIDCGroup], error) {
			return r.client.OIDC.GetAllGroups(ctx, po)
		},
		func(group dtrack.OIDCGroup) bool {
			return group.UUID == id
		},
	)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get updated oidc group",
			"Error with reading oidc group: "+id.String()+", in original error: "+err.Error(),
		)
		return
	}
	state = oidcGroupResourceModel{
		ID:   types.StringValue(oidcGroup.UUID.String()),
		Name: types.StringValue(oidcGroup.Name),
	}

	// Update state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Refreshed oidc group with id: "+state.ID.ValueString())
}

func (r *oidcGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get State
	var plan oidcGroupResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, err := uuid.Parse(plan.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Update, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	oidcGroupReq := dtrack.OIDCGroup{
		UUID: id,
		Name: plan.Name.ValueString(),
	}

	// Execute
	tflog.Debug(ctx, "Updating oidc group with id: "+id.String())
	oidcGroupRes, err := r.client.OIDC.UpdateGroup(ctx, oidcGroupReq)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to update oidc group",
			"Error in: "+id.String()+", from: "+err.Error(),
		)
		return
	}

	// Map SDK to TF
	plan = oidcGroupResourceModel{
		ID:   types.StringValue(oidcGroupRes.UUID.String()),
		Name: types.StringValue(oidcGroupRes.Name),
	}

	// Update State
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Updated oidc group with id: "+id.String())
}

func (r *oidcGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state
	var state oidcGroupResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, err := uuid.Parse(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Delete, unable to parse UUID",
			"Error parsing UUID from: "+state.ID.ValueString()+", error: "+err.Error(),
		)
		return
	}

	// Execute
	tflog.Debug(ctx, "Deleting oidc group with id: "+id.String())
	err = r.client.OIDC.DeleteGroup(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete oidc group",
			"Unexpected error when trying to delete oidc group: "+id.String()+", error: "+err.Error(),
		)
		return
	}
	tflog.Debug(ctx, "Deleted oidc group with id: "+id.String())
}

func (r *oidcGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}

func (r *oidcGroupResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	client, ok := req.ProviderData.(*dtrack.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected *dtrack.Client, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = client
}
