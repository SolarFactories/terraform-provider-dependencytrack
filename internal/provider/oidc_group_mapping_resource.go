package provider

import (
	"context"
	"fmt"
	"github.com/google/uuid"

	dtrack "github.com/DependencyTrack/client-go"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

var (
	_ resource.Resource                = &oidcGroupMappingResource{}
	_ resource.ResourceWithConfigure   = &oidcGroupMappingResource{}
	_ resource.ResourceWithImportState = &oidcGroupMappingResource{}
)

func NewOidcGroupMappingResource() resource.Resource {
	return &oidcGroupMappingResource{}
}

type oidcGroupMappingResource struct {
	client *dtrack.Client
	semver *Semver
}

type oidcGroupMappingResourceModel struct {
	ID    types.String `tfsdk:"id"`
	Team  types.String `tfsdk:"team"`
	Group types.String `tfsdk:"group"`
}

func (r *oidcGroupMappingResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_oidc_group_mapping"
}

func (r *oidcGroupMappingResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a mapping from OIDC Group to Team.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "UUID for the Mapping, as generated by DependencyTrack.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"team": schema.StringAttribute{
				Description: "UUID for the Team to map from the OIDC Group.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"group": schema.StringAttribute{
				Description: "UUID for the OIDC Group to map to the Team.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (r *oidcGroupMappingResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan oidcGroupMappingResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	team, err := uuid.Parse(plan.Team.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("team"),
			"Within Create, unable to parse team into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	group, err := uuid.Parse(plan.Group.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("group"),
			"Within Create, unable to parse group into UUID",
			"Error from: "+err.Error(),
		)
		return
	}

	mappingReq := dtrack.OIDCMappingRequest{
		Group: group,
		Team:  team,
	}
	tflog.Debug(ctx, "Mapping group "+mappingReq.Group.String()+" to team "+mappingReq.Team.String())
	mappingRes, err := r.client.OIDC.AddTeamMapping(ctx, mappingReq)

	if err != nil {
		resp.Diagnostics.AddError(
			"Error creating group mapping",
			"Unexpected error: "+err.Error(),
		)
		return
	}
	plan = oidcGroupMappingResourceModel{
		ID:    types.StringValue(mappingRes.UUID.String()),
		Group: types.StringValue(mappingRes.Group.UUID.String()),
		// Response does not include Team UUID
		Team: types.StringValue(team.String()),
	}

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Created mapping with id: "+mappingRes.UUID.String()+", for group with id: "+mappingRes.Group.UUID.String()+" to team, with id: "+team.String())
}

func (r *oidcGroupMappingResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Fetch state
	var state oidcGroupMappingResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Refreshing oidc group mapping with id: "+state.ID.ValueString()+", for team: "+state.Team.ValueString()+", and group: "+state.Group.ValueString())

	// Refresh
	id, err := uuid.Parse(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Read, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}
	mappingInfo, err := FindPagedOidcMapping(id, func(po dtrack.PageOptions) (dtrack.Page[dtrack.Team], error) {
		return r.client.Team.GetAll(ctx, po)
	})

	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get group team mapping within Read",
			"Error with reading mapping with id: "+id.String()+", for team: "+mappingInfo.Team.String()+", and group: "+mappingInfo.Group.String()+", in original error: "+err.Error(),
		)
		return
	}
	state = oidcGroupMappingResourceModel{
		ID:    types.StringValue(id.String()),
		Team:  types.StringValue(mappingInfo.Team.String()),
		Group: types.StringValue(mappingInfo.Group.String()),
	}

	// Update state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Refreshed group mapping for team: "+mappingInfo.Team.String()+", and group: "+mappingInfo.Group.String())
}

func (r *oidcGroupMappingResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get State
	var plan oidcGroupMappingResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	id, err := uuid.Parse(plan.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Update, unable to parse id into UUID",
			"Error from: "+err.Error(),
		)
		return
	}

	mappingInfo, err := FindPagedOidcMapping(id, func(po dtrack.PageOptions) (dtrack.Page[dtrack.Team], error) {
		return r.client.Team.GetAll(ctx, po)
	})
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to get group team mapping within Update",
			"Error with reading mapping with id: "+id.String()+", for team: "+mappingInfo.Team.String()+", and group: "+mappingInfo.Group.String()+", in original error: "+err.Error(),
		)
		return
	}

	plan = oidcGroupMappingResourceModel{
		ID:    types.StringValue(id.String()),
		Team:  types.StringValue(mappingInfo.Team.String()),
		Group: types.StringValue(mappingInfo.Group.String()),
	}

	// Update State
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, "Updated group mapping with id: "+id.String()+", for team: "+mappingInfo.Team.String()+", and group: "+mappingInfo.Group.String())
}

func (r *oidcGroupMappingResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Load state
	var state oidcGroupMappingResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map TF to SDK
	id, err := uuid.Parse(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddAttributeError(
			path.Root("id"),
			"Within Delete, unable to parse UUID",
			"Error parsing UUID from: "+state.ID.ValueString()+", error: "+err.Error(),
		)
		return
	}

	// Execute
	tflog.Debug(ctx, "Deleting group mapping with id: "+id.String()+", for group with id: "+state.Group.ValueString()+", and team with id: "+state.Team.ValueString())
	err = r.client.OIDC.RemoveTeamMapping(ctx, id)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to delete group mapping",
			"Unexpected error when trying to delete oidc group mapping with id: "+id.String()+", error: "+err.Error(),
		)
		return
	}
	tflog.Debug(ctx, "Deleted oidc group mapping with id: "+id.String())
}

func (r *oidcGroupMappingResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}

func (r *oidcGroupMappingResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	clientInfo, ok := req.ProviderData.(clientInfo)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Configure Type",
			fmt.Sprintf("Expected provider.clientInfo, got %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = clientInfo.client
	r.semver = clientInfo.semver
}
