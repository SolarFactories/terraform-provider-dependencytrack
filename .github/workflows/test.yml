# Terraform Provider testing workflow.
name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: latest

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: 'go.mod'
          cache: true
      # We need the latest version of Terraform for our documentation generation to use
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false
      - run: make generate
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Terraform Provider Acceptance Tests
    # Disable running acceptance tests on pipeline, until able to bring up local DT service, sign in and generate an API Key for it
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      api:
        image: dependencytrack/apiserver
#        options:
#          --health-cmd "curl api:8081/health -o /dev/null"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
        ports:
          - 8081:8080

    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '1.0.*'
#          - '1.1.*'
#          - '1.2.*'
#          - '1.3.*'
#          - '1.4.*'
#          - '1.5.*'
#          - '1.6.*'
#          - '1.7.*'
#          - '1.8.*'
#          - '1.9.*'
    steps:
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Bootstrap authentication
        shell: bash
        run: |
          ./scripts/change-password.sh
          export TOKEN="$(./scripts/login.sh)"
          ./scripts/disable-settings.sh
          export TEAM_UUID="$(./scripts/create-team.sh | jq -r '.uuid')"
          PERMISSIONS="$(./scripts/get-valid-permissions.sh | jq -r '.[].name')"
          for perm in $PERMISSONS; do
            ./scripts/assign-permission.sh
          done
          export API_KEY="$(./create-token)"
          echo "DEPENDENCYTRACK_API_KEY=${API_KEY}" >> $GITHUB_ENV

        env:
          HOST: "localhost:8081"
          USERNAME: "admin"
          CURRENT_PASSWORD: "admin"
          NEW_PASSWORD: "pipeline"
          PASSWORD: "pipeline"
          TEAM_NAME: "Pipeline ${{ matrix.terraform }}"


#      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
#        with:
#          go-version-file: 'go.mod'
#          cache: true
#      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
#        with:
#          terraform_version: ${{ matrix.terraform }}
#          terraform_wrapper: false
#      - run: go mod download
#      - env:
#          TF_ACC: "1"
#        run: go test -v -cover ./internal/provider/
#        timeout-minutes: 10
